@App:name('ETLFileAnalyzer')
@App:description('This sample demonstrates on moving files to a specific location comparing its content with the header values.')

/*
Purpose:
    This sample demonstrates on moving files to a specific location comparing its content with the header values.

Prerequisites:
    1) Do the prerequisites of ETL_File_Records_Copier.siddhi, Save and Run
    2) Replace `/Users/wso2/` locations in the siddhi application pointing to the newly copied directory
    3) Save this sample.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following message is shown on the console
        * ETL_File_Analyzer.siddhi - Started Successfully!
Note:
    If you want to edit this application while it's running, stop the application, make your edits and save the application, and then start it again.

Testing the Sample:
    Observe the following logs logged on the console.
        Batch checking started:  : Event{timestamp=1581795233846, data=[/Users/wso2/demo/new/correct.txt, 6], isExpired=false}
        Batch checking started:  : Event{timestamp=1581795234851, data=[/Users/wso2/demo/new/incorrect.txt, 7], isExpired=false}
        Accurate Batch:  : Event{timestamp=1581795235851, data=[/Users/wso2/demo/header-processed/correct.txt], isExpired=false}
        Batch checking finished:  : Event{timestamp=1581795235851, data=[/Users/wso2/demo/header-processed/correct.txt, 6], isExpired=false}
        Inaccurate Batch:  : Event{timestamp=1581795236857, data=[/Users/wso2/demo/header-processed/incorrect.txt], isExpired=false}
        Batch checking finished:  : Event{timestamp=1581795236857, data=[/Users/wso2/demo/header-processed/incorrect.txt, 6], isExpired=false}
        File to DB copying has Started:  : Event{timestamp=1581795237140, data=[/Users/wso2/demo/accurate-files/correct.txt], isExpired=false}
        File to DB copying has Finished:  : Event{timestamp=1581795237141, data=[/Users/wso2/demo/accurate-files/correct.txt], isExpired=false}
*/

@source(type='file', mode='REGEX',
    dir.uri='file:/Users/wso2/demo/new',
    action.after.process='MOVE',
    move.after.process='file:/Users/wso2/demo/header-processed',
    tailing='false',
    @map(
        type='text',
        fail.on.missing.attribute = 'false',
        regex.A='HDprod-[a-zA-z]*-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-([0-9]+)',
        @attributes(
            expectedRowCount = 'A[1]',
            fileName = 'trp:file.path')))
define stream HeaderReaderStream (fileName string, expectedRowCount long);

@source(type='file', mode='LINE',
    dir.uri='file:/Users/wso2/demo/header-processed',
    tailing='false',
    header.present='true',
    @map(
        type='csv',
        delimiter='|',
        @attributes(code = '0', serialNo = '1', amount = '2', fileName = 'trp:file.path', eof = 'trp:eof')))
define stream FileReaderStream (code string, serialNo string, amount double, fileName string, eof string);

@sink(type='log', prefix='Accurate Batch: ')
define stream AccurateFileNotificationStream (fromPath string);

@sink(type='log', prefix='Inaccurate Batch: ')
define stream InaccurateFileNotificationStream (fromPath string);

@sink(type='log', prefix='Batch checking started: ')
define stream ExpectedRowCountsStream (fileName string, expectedRowCount long);

define stream AnalyzingLogStream (fileName string, rowCount long);

define table ExpectedRowCountsTable (fileName string, expectedRowCount long, existingRowCount long);

@sink(type='log', prefix='Batch checking finished: ')
define stream ExistingRowCountsStream (fileName string, existingRowCount long);

-- Expected Row Count reader. Moves file from 'new' to 'header-processed'
from HeaderReaderStream[NOT(expectedRowCount is null) and NOT(fileName is null)]
select *
insert into ExpectedRowCountsStream;

from ExpectedRowCountsStream
select fileName, expectedRowCount, -1L as existingRowCount
insert into ExpectedRowCountsTable;

-- Existing Row Count calculator. Moves file from 'header-processed' to 'rows-counted'
from FileReaderStream
select *
insert into FileDataStream;

partition with (fileName of FileDataStream)
begin
    from FileDataStream
    select fileName, count() as rowCount, eof
    insert into #ThisFileRowCounts;
    
    from #ThisFileRowCounts
    select fileName, rowCount
    insert into AnalyzingLogStream;

    from #ThisFileRowCounts[eof == 'true']
    select fileName, rowCount as existingRowCount
    insert into ExistingRowCountsStream;
end;

-- Existing vs. Expected Row Counts comparer
from ExistingRowCountsStream as S inner join ExpectedRowCountsTable as T on str:replaceFirst(S.fileName, 'header-processed', 'new') == T.fileName
select S.fileName as fromPath, T.expectedRowCount as expectedRowCount, S.existingRowCount as existingRowCount
insert into FileInfoMatcherStream;

from FileInfoMatcherStream
select fromPath, existingRowCount
update ExpectedRowCountsTable
    set ExpectedRowCountsTable.existingRowCount = existingRowCount
    on ExpectedRowCountsTable.fileName == fromPath;
    
-- Accurate file mover
from FileInfoMatcherStream[expectedRowCount == existingRowCount]
select fromPath
insert into AccurateFileStream;

from AccurateFileStream#file:move(fromPath, '/Users/wso2/demo/accurate-files/')
select fromPath
insert into AccurateFileNotificationStream;

-- Inaccurate batch file mover
from FileInfoMatcherStream[expectedRowCount != existingRowCount]
select fromPath
insert into InaccurateFileStream;

from InaccurateFileStream#file:move(fromPath, '/Users/wso2/demo/inaccurate-files/')
select fromPath
insert into InaccurateFileNotificationStream;
