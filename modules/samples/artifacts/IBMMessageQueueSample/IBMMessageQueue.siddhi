@App:name("IBMMessageQueueSample")

@App:description('Consume event from IBM Message Queue')

/*

Purpose:
    This application demonstrates how to consume events from IBM Message Queue and publish messages in to a IBM Queue
Prerequisites:
    1) Ensure that there is a running IBM MQ instance.
    2) Create a queue manager named ESBQManager, Queue named  Queue1 and channel named Channel1
    3) Add com.ibm.mq.allclient_9.0.5.0_1.0.0.jar and javax.jms-api-2.0.1.jar into SI distribution this can be done in two ways.
        3.1) [Recommended] Install the required jars using the extensions Installer tool which is available in the editor;
             3.1.1) Navigate to Tools/Extension Installer on Editor menu.
             3.1.2) Search for the entry 'IBM MQ' from the search panel and install
        3.2) Copy the required jar files to the {WSO2_SI_HOME}/lib
             3.2.1) Download com.ibm.mq.allclient_9.0.5.0_1.0.0.jar from https://repo1.maven.org/maven2/com/ibm/mq/com.ibm.mq.allclient/9.0.5.0/com.ibm.mq.allclient-9.0.5.0.jar
             3.2.2) Convert the downloaded com.ibm.mq.allclient_9.0.5.0_1.0.0.jar to an OSGi bundle using the 'jartobundle.sh|bat' tool located in the {WSO2_SI_HOME}/bin and copy the converted jar into {WSO2_SI_HOME}/lib folder
             3.2.2) Download javax.jms-api-2.0.1.jar from https://repo1.maven.org/maven2/javax/jms/javax.jms-api/2.0.1/javax.jms-api-2.0.1.jar
             3.2.3) Copy the downloaded javax.jms-api-2.0.1.jar to the {WSO2_SI_HOME}/lib

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * IBMMessageQueueSample.siddhi - Started Successfully!

Testing the Sample:
    1) Simulate single events. For this, click on 'Event Simulator' (double arrows on left tab) -> 'Single Simulation' -> Select 'IBMMessageQueueSample' as 'Siddhi App Name' -> Select 'SweetProductionSinkStream' as 'Stream Name' -> Provide attribute values -> Send

Viewing the Results:
    See the output on the console.

*/



@source(type='ibmmq',
        destination.name='Queue1',
        host='192.168.56.3',
        port='1414',
        channel='Channel1',
        queue.manager = 'ESBQManager',
        username = 'mqm',
        password = '1920',
        @map(type='xml'))
define stream SweetProductionSourceStream(name string);

@sink(type='ibmmq',
      destination.name='Queue1',
      host='192.168.56.3',
      port='1414',
      channel='Channel1',
      queue.manager = 'ESBQManager',
      username = 'mqm',
      password = '1920',
      @map(type='xml'))
define stream SweetProductionSinkStream(name string);

@sink(type='log')
define stream logStream(name string);

from SweetProductionSourceStream
select *
insert into logStream;
